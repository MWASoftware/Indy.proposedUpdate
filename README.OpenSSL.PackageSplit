This is a "strawman" proposal to demonstrate a possible package split. That is 
separating out the OpenSSL Indy components into a separate package. This
version is based on the current (2024-08-17) "master" branch on GitHub for IndySockets/Indy.

Two OpenSSL package variations are provided for both Delphi and Lazarus.

1. IndyOpenSSLLegacy (see Lib/OpenSSL/legacy)

This uses the "legacy" OpenSSL units only. That is, it provides support for OpenSSL 1.0.2
and no later versions. It incorporates the recent updates to NTLM support and specifically the
IdNTLMOpenSSL unit, plus supporting changes to Lib/Protocols/IdFIPS, IdNTML and IdAuthentication NTLM.

Otherwise, Lib/OpenSSL/legacy comprises the following units, moved from Lib/Protocols

IdResourceStringsOpenSSL.pas
IdServerIOHandlerSSLOpenSSL.pas
IdSSLOpenSSLHeaders.pas
IdSSLOpenSSLHeaders_static.pas
IdSSLOpenSSL.pas
IdSSLOpenSSLUtils.pas

2. Smart Linking (see Lib/OpenSSL/smartLinking)

The OpenSSL units in this directory are taken from my original proposed update to Indy and uses the "smart 
linking strategy". This creates an "all singing all dancing" OpenSSL package that supports 
OpenSSL 1.0.2, 1.1.1 and 3.x and which dynamically adjusts to the version it finds. It is intended as a 
"drop in" replacement for the legacy package..

It probably works with earlier versions - but not tested.

Three link models are supported.
   Dynamic Library Load (the default and the approach used in previous versions)
   compile time linkage to a shared (.so or .dll) library (OpenSSL 3.x only)
   compile time linkage to a static library (FPC only with gcc compiled 
OpenSSL).

I have tested this package under the following scenarios:

1. Static Linking to Static Library (Lazarus/Linux only with gcc generated libssl.a and libcrypto.a).

2. Static Linking to Shared Library (DLL/so). Delphi and Lazarus (Windows and Linux).

3. Dynamic Load and Link. Delphi and Lazarus (Windows and Linux). OpenSSL 1.0.2, 1.1.1. and 3.x

The different link strategies are selected at compile time by a "defined symbol" set in the OpenSSL
package options (not the using program), as follows:

- OPENSSL_USE_STATIC_LIBRARY (Static Linking to Static Library)
- OPENSSL_USE_SHARED_LIBRARY (Static Linking to Shared Library)
- Neither of the above (Dynamic Load and Link).


Delphi Builds
=============

All Protocols/IndyProtocolsnnn.dpk and dproj files have been edited to remove references to the moved files.
However only Protocols/IndyProtocols290 has been tested (with Delphi Berlin edition).

New Packages:

IndyOpenSSLLegacy290 and
dclIndyOpenSSLLegacy290 (design time only)

may be found in Lib\OpenSSL\legacy.

These are dependent on IndyProtocols290 and dclIndyProtocols290,IndyOpenSSLLegacy290  respectively.

To use OpenSSL in a given project, the IndyOpenSSLLegacy290 package must now be included.

Similarly, the packages

IndyOpenSSLSmart290 and
dclIndyOpenSSLSmart290

may be found in  Lib\OpenSSL\smartLinking

Smart Linking is selected for a given project by including the IndyOpenSSLSmart290 packing
as a progect dependency instead of IndyOpenSSLLegacy290.

Lib\Indy290.groupproj has been updated to include the new packages in the project group.

icons\makedcr.bat has been updated to generate a .dcr package for the OpenSSL packages.

Note that there are no conflicts when compiling the two as they output to different unit
directories. However, only one of the SSL design time packages may be added to the IDE
at the same time, or add as a project dependency.


Lazarus/FPC Builds
==================

All lazaarus packages may be found in the lazarus-fpc top level folder. These are:

indysystem.lpk
indycore.lpk
indyprotocols.lpk
indyopenssllegacy.lpk
indyopensslsmart.lpk

and the design time only packages

indylaz.lpk
indylaz_openssllegacy.lpk
indylaz_indyopensslsmart

In order to install this strawman branch for Lazarus (Windows and Linux), Open first 
that package indylaz.lpk and click on install. Then Open indylaz_openssllegacy.lpk and 
click on install. The Indy Library should now be available for use.

Test Programs
=============

Two test programs are available with variants for Delphi and Lazarus, and set up for legacy and smart linking. 
These may be found in:

1. Test/OpenSSL/legacy/openssl-client and Test/OpenSSL/legacy/openssl-server.
1. Test/OpenSSL/smart/openssl-client and Test/OpenSSL/smart/openssl-server.

openssl-client uses an HTTP Client to issue an http Get on an https target and returns 
the result. The server certificate is also verified (Linux only for legacy version).

openssl-server provides both and a server and uses a local PKI to retrieve a web page 
from the server, with both client and server certificate verification and to return the result.

Note that for Delphi, two convenience project groups are provided:

Test\OpenSSL\legacy\OpenSSLTests.groupprog and
Test\OpenSSL\smart\OpenSSLTests.groupprog

These build both test programs and their supporting packages as a single project group. You do
not have to install the design time packages in order to use the test programs.

When testing under Lazarus, similarly you do not need to have installed the design time packages.
However, you need to at least "open" the dependent packages so that the IDE knows where to find
them.



