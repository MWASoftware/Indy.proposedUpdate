This is a "strawman" proposal to demonstrate a possible package split. That is 
separating out the OpenSSL Indy components into a separate package. This
version is based on the current (2024-08-17) "master" branch on GitHub for IndySockets/Indy.

Three link models are supported.
   Dynamic Library Load (the default and the approach used in previous versions)
   compile time linkage to a shared (.so or .dll) library (OpenSSL 3.x only)
   compile time linkage to a static library (FPC only with gcc compiled 
OpenSSL).

For dynamic library load, a "Just in Time" approach is used where each API call is initialised to a local proc "loader" function.
The intent is that on the first call a given API function, the actual entry point in the OpenSSL function
is loaded and the API call is set to the loaded entry point. The API function is now called on the user's
behalf. If the call fails to load then it is replaced by a compatibility function (if one exists). If none exists 
then an exception is raised. If an API function is allowed to be nil (as set in the template), then the function
is loaded at library load time.


I have tested this package under the following scenarios:

1. Static Linking to Static Library (Lazarus/Linux only with gcc generated libssl.a and libcrypto.a).

2. Static Linking to Shared Library (DLL/so). Delphi and Lazarus (Windows and Linux).

3. Dynamic Load and Link. Delphi and Lazarus (Windows and Linux). OpenSSL 1.0.2, 1.1.1. and 3.x

For (2) and (3) above, the different link strategies are selected at compile time by a "defined symbol" set in the OpenSSL
package options (not the using program), as follows:

- OPENSSL_USE_STATIC_LIBRARY (Static Linking to Static Library)
- OPENSSL_USE_SHARED_LIBRARY (Static Linking to Shared Library)
- Neither of the above (Dynamic Load and Link).

Note that (2) and (3) behave identically for Static and Shared library linking).

The defined synbol OPENSSL_NO_LEGACY_SUPPORT may also be set at compile time and applies to Dynamic
loading. If set, no compatibility functions are compile in to the executeable. Only 3.0 or later
API calls may be used.


Delphi Builds
=============

All Protocols/IndyProtocolsnnn.dpk and dproj files have been edited to remove references to the moved files.
However only Protocols/IndyProtocols290 has been tested (with Delphi Berlin edition).

New Packages:

IndyOpenSSL290 and
dclIndyOpenSSL290 (design time only)

may be found in Lib\OpenSSL\.

These are dependent on IndyProtocols290 and dclIndyProtocols290,IndyOpenSSLLegacy290  respectively.

To use OpenSSL in a given project, the IndyOpenSSL290 package must now be included.

Lib\Indy290.groupproj has been updated to include the new packages in the project group.

icons\makedcr.bat has been updated to generate a .dcr package for the OpenSSL packages.

Lazarus/FPC Builds
==================

All lazaarus packages may be found in the "lazarus-fpc/" top level folder. These are:

indysystem.lpk
indycore.lpk
indyprotocols.lpk
indyopenssl.lpk

and the design time only packages

indylaz.lpk
indylaz_indyopenssl

In order to install this strawman branch for Lazarus (Windows and Linux), Open first 
that package indylaz.lpk and click on install. Then Open the package indylaz_openssl.lpk and 
click on install. The Indy Library should now be available for use.

Test Programs
=============

Two test programs are available with variants for Delphi and Lazarus. These may be found in:

1. Test/OpenSSL/openssl-client and
2. Test/OpenSSL/openssl-server.

openssl-client uses an HTTP Client to issue an http Get on an https target and returns 
the result. The server certificate is also verified.

openssl-server provides both and a server and uses a local PKI to retrieve a web page 
from the server, with both client and server certificate verification and to return the result.

Note: in all cases the compiled programs are placed in the openssl-client or openssl-server
directories.

Note that for Delphi, a convenience project group is provided:

Test\OpenSSL\OpenSSLTests.groupprog

These build both test programs and their supporting packages as a single project group. You do
not have to install the design time packages in order to use the test programs.

When testing under Lazarus, similarly you do not need to have installed the design time packages.
However, you need to at least "open" the dependent packages so that the IDE knows where to find
them.

Test program command line arguments:

Usage: fpc_openssl_client [-h] [-n] [-l <cacerts dir>] [-L] [OpenSSL lib dir]

Usage: fpc_openssl_client [-h] [-n] [-l <cacerts dir>] [-L] [OpenSSL lib dir]

-L is useful under Linux when the OpenSSL Library used has not been installed and 
   hence does not know where to find its X.509 certificate store. When -L is
   given, the program searches a list of possible locations.






